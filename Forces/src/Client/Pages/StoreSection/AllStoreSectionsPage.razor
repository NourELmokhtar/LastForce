@page "/SectionStore"
@inject Microsoft.Extensions.Localization.IStringLocalizer<AllStoreSectionsPage> _localizer
@using Forces.Application.Features.SectionStore.Queries.GetAll
@using Forces.Client.Infrastructure.Managers.StoreSection
@inject IStoreSectionManager _storeSectionManager;
<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<HeroTitle Title="@_localizer["Store Sections"]" Description="@_localizer["Manage Store Section."]" />
@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTable Elevation="25" Items="StoreSectionList" Hover="true">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">

                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => InvokeModal(0))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">@_localizer["Create"]</MudButton>
                <MudButton DisableElevation Variant="Variant.Filled" OnClick="GetStoreSectionList" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">@_localizer["Reload"]</MudButton>

            </div>
            <MudSpacer />


            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="@_localizer["Search for Forces"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>

        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="GetAllSectionStoreResponse" SortLabel="Id">@_localizer["Id"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetAllSectionStoreResponse" SortLabel="Name">@_localizer["Name"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetAllSectionStoreResponse" SortLabel="Brand">@_localizer["Code"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="GetAllSectionStoreResponse" SortLabel="Description">@_localizer["Section ID"]</MudTableSortLabel></MudTh>

            <MudTh Style="text-align:right">@_localizer["Actions"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">
                <MudHighlighter Text="@context.StoreName" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Brand">
                <MudHighlighter Text="@context.StoreCode" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Description">
                <MudHighlighter Text="@context.SectionId.ToString()" HighlightedText="@_searchString" />
            </MudTd>

            <MudTd DataLabel="Actions" Style="text-align: right">

                <MudMenu Label="@_localizer["Actions"]" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">

                    <MudMenuItem @onclick="@(() => InvokeModal(@context.Id))">@_localizer["Edit"]</MudMenuItem>

                    <MudMenuItem @onclick="@(() => Delete(@context.Id))">@_localizer["Delete"]</MudMenuItem>

                </MudMenu>


            </MudTd>
        </RowTemplate>

        <PagerContent>
            <TablePager />
        </PagerContent>
    </MudTable>
}



@code {
    private bool _loaded;
    private List<GetAllSectionStoreResponse> StoreSectionList = new();
    private string _searchString = "";
    protected override async Task OnInitializedAsync()
    {
        await GetStoreSectionList();
    }

    private bool Search(GetAllSectionStoreResponse section)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (section.StoreCode?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (section.StoreName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }

        return false;
    }
    private void Delete(int Id)
    {

    }
    private void InvokeModal(int Id)
    {

    }

    private async Task GetStoreSectionList()
    {
        var response = await _storeSectionManager.GetAllAsync();
        if (response.Succeeded)
        {
            StoreSectionList = response.Data.ToList();
            _loaded = true;
        }
        else
        {
            foreach (var message in response.Messages)
            {
                _snackBar.Add(message, Severity.Error);
            }
        }
    }
}
